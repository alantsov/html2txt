Haskell — Википедия                                     	 	 	Haskell 	 		Материал из Википедии — свободной энциклопедии 		 		Перейти к: навигация, поиск 		  Haskell 	 
  Класс языка:  функциональный, ленивый, модульный
 	 
  Тип исполнения:  компилируемый, интерпретируемый
 	 
  Появился в:  1990 г.
 	 
  Типизация данных:  статическая, строгая, свыводом типов
 	 
  Основные реализации:  GHC, HUGS, NHC, YHC
 	 
  Диалекты:  Helium, Gofer, O'Haskell, Haskell++, Mondrian, Disciple
 	 
  Испытал влияние:  Lisp и Scheme, ISWIM, FP, АПЛ, Hope и Hope+, SISAL, Miranda, ML и Standard ML, Lazy ML, Orwell, Id
 	 
  Повлиял на:  Agda, Bluespec, Clojure, C#, CAL, Cat, Cayenne, Clean, Curry, Epigram, Escher, F#, Factor, Isabelle, Java Generics, LINQ, Mercury, Omega, Perl 6, Python, Qi, Scala, Timber, Visual Basic 9.0
 	 
  Сайт:  haskell.org
 	 
  Háskell (русск. Ха́скель, Ха́скелл) — стандартизованный чистый функциональный язык программирования общего назначения. Является одним из самых распространённых языков программирования с поддержкой отложенных вычислений. Типизация в Хаскеле строгая, статическая, с автоматическим выводом типов. Поскольку язык функциональный, то основная управляющая структура — это функция. Серьёзное отношение к типизации — ещё одна отличительная черта Хаскеля. Концепция языка отражает идею математика Хаскелла Карри, писавшему, что «доказательство — это программа, а доказываемая формула — это тип программы»[1][2]. Именно в честь Х. Карри язык и получил своё название.
 Сегодня Хаскель стал языком быстрой разработки надёжных, кратких и корректных программ. Имеются средства взаимодействия с кодом на других языках программирования. Есть встроенная поддержка многозадачного и параллельного программирования, развитый инструментарий (средства автоматического тестирования, отладки и профилирования, в том числе для параллельных программ), существует много библиотек с открытым исходным кодом (более 1800 пакетов в одном только архиве Hackage)[3].
    Содержание  
- 1 История
-2 Характеристики языка
 -3 Реализации языка 
 -3.1 Компиляторы и интерпретаторы
 -3.2 Haskell Platform
 -3.3 Альтернативные целевые платформы
 -3.4 Расширения языка
 
 
 -4 Примеры 
 -4.1 Вычисление факториала
 -4.2 Калькулятор
 -4.3 Числа Фибоначчи
 -4.4 Простые числа
 -4.5 Описание игральных карт
 -4.6 Численное интегрирование
 -4.7 Проверка палиндромов
 
 
 -5 Приложения, написанные на языке Haskell 
 -5.1 Проприетарные приложения
 -5.2 Приложения с открытым исходным кодом 
 -5.2.1 Базы данных
 -5.2.2 Графика
 -5.2.3 Графические интерфейсы
 -5.2.4 Игры
 -5.2.5 Интернет
 -5.2.6 Обработка текста
 -5.2.7 Параллельное, многозадачное и многопоточное программирование
 -5.2.8 Разработка
 -5.2.9 Системные программы
 -5.2.10 Языки и компиляторы
 
 
 
 
 -6 См. также
 -7 Примечания
 -8 Литература
 -9 Ссылки
 
 	
  [править] История Хаскель принадлежит к семейству языков ML. Непосредственно на него оказал большое влияние язык Miranda, разработанный в 1985г. Дэвидом Тёрнером. Миранда была первым чистым функциональным языком, имевшем коммерческую поддержку, и была относительно популярна в 1980-х годах, но оставалась несвободным программным обеспечением. Это затрудняло развитие и исследования возможностей ленивого функционального программирования, поэтому буквально за пару лет появилось более десятка схожих языков. Чтобы объединить усилия разных разработчиков, в 1987 г. на конференции по функциональным языкам программирования и компьютерной архитектуре в Орегоне (FPCA’87) было решено создать комитет для разработки открытого стандарта.
 В 1990 г. была предложена первая версия языка, Haskell 1.0. В дальнейшем работа комитета продолжилась, и в 1999 г. был опубликован «The Haskell 98 Report[4]», который стал стабильным стандартом языка на много лет. Язык, однако, продолжал бурно развиваться, компилятор GHC был фактическим стандартом в отношении новых возможностей.
 Сейчас разработка новых версий языка идёт открыто, этот процесс получил название Haskell’[5] (Haskell Prime [ˈhæskəl praɪm], «Хаскель-штрих»). Все желающие могут выдвигать свои предложения к обсуждению, предложения обсуждаются в течение года, комитет отбирает и объявляет предложения, которые готов принять, формируется новый комитет и к концу года готовится новая версия языка. Таким образом, новые версии языка теперь могут появляться каждый год. Планируется объявлять некоторые ревизии «значительными» и поддерживать такие ревизии на протяжении длительного времени.
 Последняя версия языка — Haskell 2010 — была объявлена в конце 2009 г[6], но последней «значительной» версией (стандартом) остаётся Haskell 98.
 [править] Характеристики языка В качестве основных характеристик языка Haskell можно выделить следующие:
 
- возможность использования лямбда-абстракции;
-функции высшего порядка;
 -частичное применение;
 -недопустимость побочных эффектов (чистота языка);
 -ленивые вычисления (lazy evaluation);
 -сопоставление с образцом, функциональные образцы (pattern matching);
 -параметрический полиморфизм (в т.ч. абстрагирование от конструктора типа) и полиморфизм классов типов;
 -статическая типизация;
 -автоматическое выведение типов (основано на модели типизации Хиндли — Милнера);
 -алгебраические типы данных;
 -параметризуемые типы данных;
 -рекурсивные типы данных;
 -абстрактные типы данных (инкапсуляция);
 -генераторы списков (list comprehensions);
 -охраняющие выражения (guards);
 -возможность писать программы с побочными эффектами без нарушения парадигмы функционального программирования с помощью монад;
 -возможность интеграции с программами, реализованными на императивных языках программирования посредством открытых интерфейсов (стандартное расширение языка Foreign Function Interface).
 
 Со времени принятия последнего стандарта языка (Haskell98) прошло много времени и с тех пор ведущие реализации языка (ghc и hugs) были расширены множеством дополнительных возможностей:
 
- Полиморфизм 2-го и высших рангов (rank-2 and rank-N polymorphism)
-Функциональные зависимости (FD, functional dependencies)
 
 [править] Реализации языка Есть несколько реализаций языка Хаскель[7]. Некоторые реализации ориентированы на практическое применение, в то время как другие — представляют прежде всего академический интерес.
 [править] Компиляторы и интерпретаторы Наиболее популярен на практике оптимизирующий компилятор GHC, который создаёт быстрый код и позволяет использовать многие расширения языка. GHC может оптимизировать как скорость, так и компактность программ, способен создавать многозадачный и параллелизованный код. В комплекте с компилятором GHC поставляется также интерактивная среда программирования GHCi со встроенным отладчиком. GHC работает в Windows, MacOS X и на нескольких юникс-подобных платформах (Linux, *BSD, Solaris). Именно GHC является стандартным компилятором в Haskell Platform, и именно на нём в первую очередь тестируются все новые библиотеки.
 Другая популярная реализация языка — интерпретатор HUGS. Он написан на Си, имеет малый размер дистрибутива и работает практически на всех платформах. HUGS предоставляет интерактивную среду программирования, но может также запускать программы на Хаскеле в стиле скриптовых языков. Пользователи Windows могут использовать графическую интерактивную среду WinHugs. Поскольку HUGS интерпретатор, то программы, запущенные в нём, выполняются медленнее, чем код, созданный большинством компиляторов Хаскеля. HUGS часто рекомендуют в качестве среды для изучения языка. HUGS полностью поддерживает стандарт языка Haskell98, а также некоторые наиболее популярные расширения языка.
 Другие известные реализации:
 
- nhc98 — быстрый компилятор, поддерживающий стандарт Haskell 98, написанный на Haskell 98; доступен для всех юникс-подобных платформ, включая MacOS X и Windows/cygwin
-YHC (York Haskell Compiler) — форк nhc98, ставящий целью быть более переносимым и эффективным, поддерживает отладчик Hat; генерирует промежуточный байт-код, который можно использовать для генерации кода на других языках программирования
 -UHT (Ultrecht Haskell Compiler) — компилятор, поддерживающий Haskell 98 почти полностью, а также некоторые расширения; поддерживает глобальный анализ программ; имеет несколько кодогенераторов, в том числе почти полностью функциональный генераторм JVM-кода, кодогенераторы для LLVM и CLR в состоянии разработки; работает на юникс-подобных системах (включая MacOS X и Windows/cygwin)
 -HBI и HBC — интерпретатор и компилятор, поддерживающие стандарт Haskell 98 с некоторыми расширениями; точно работает в Linux, поддерживается слабо
 -LHC (The Luxurious LHC Haskell Optimization System) — альтернативный кодогенератор для GHC, поддерживающий глобальную низкоуровневую оптимизацию программы в целом
 -jhc — экспериментальный компилятор для исследования возможностей глобальной оптимизации программ
 -Yale Haskell — ранняя реализация языка Хаскель на Lisp
 
 [править] Haskell Platform В 2009 году сформировалась концепция Haskell Platform — стандартного дистрибутива языка, включающего кроме компилятора (GHC), также дополнительный инструментарий (систему сборки и развёртывания пакетов Cabal) и набор популярных библиотек.
 Сейчас Haskell Platform — это рекомендованный базовый дистрибутив для разработчиков. Готовые сборки Haskell Platform доступны для Windows, MacOS X и ряда дистрибутивов Linux.
 [править] Альтернативные целевые платформы Большинство компиляторов Хаскеля создают непосредственно машинный код для используемой платформы, но есть несколько проектов, позволяющих компилировать Хаскель в код для виртуальных машин или генерировать код на других языках программирования. Степень зрелости и уровень поддержки подобных проектов сильно разнится.
 
- LLVM:
- патч для GHC, добавляющий генератор кода для LLVM, вероятно будет включен в будущие версии компилятора GHC[8]; использование LLVM позволяет достичь большей производительности на ряде задач[9].
-альтернативный кодогенератор в UHT (работоспособен частично)
 
 

 
- виртуальная машина Java (JVM):
- LambdaVM — патч для GHC, добавляющий генератор байткода JVM
-jvm-bridge — мост между Haskell и JVM (для GHC)
 -jaskell — генератор байт-кода JVM (вероятно заброшен)
 -альтернативный кодогенератор в UHT (работоспособен почти полностью)
 
 

 
- Common Language Runtime (.Net):
- прототип генератора MSIL-кода для компилятора EHT/UHT
-некоторые проекты по поддержке CLR упоминаются в GHC FAQ, на начало 2010 года их состояние не ясно
 
 

 
- JavaScript:
- кодогенератор JavaScript для GHC — патч для GHC позволяющий компилировать программы в JavaScript-код
-Ycr2Js — конвертер байт-кода компилятора YHC в JavaScript
 
 

 Несколько интересных целевых платформ доступны при использовании компилятора YHC, в частности существуют интерпретатор байт-кода YHC на Питоне и конвертер байт-кода YHC в Erlang Core, но эти разработки пока ещё экспериментальны. Также существуют реализации подмножеств языка на разных целевых платформах.
 [править] Расширения языка 
- макрорасширение с контролем типов (Template Haskell);
-объектно-ориентированное программирование (O’Haskell, Haskell++ и Mondrian).
 
 Расширения реализаций языка (относится к GHC):
 
- развитие системы типизации;
-многопоточность;
 -параллельные вычисления;
 -распределённые вычисления.
 
 [править] Примеры [править] Вычисление факториала Следующий пример показывает синтаксис языка Haskell при реализации функции для вычисления факториала:
     fac :: Integer -> Integer  fac 0 = 1 fac n | n > 0 = n * fac (n - 1)   Это определение описывает процесс вычисления факториала в виде рекурсивной функции. Это определение похоже на то, которое можно найти в учебниках по информатике. Большая часть исходного кода на языке Haskell походит на математическую нотацию в аспектах синтаксиса и использования, например, вышеприведённый пример можно переписать в виде
    fac n = product [1..n]   что соответствует математическому определению факториала.
 Первая строка в приведённом выше определении является необязательной, так как определяет (вернее, ограничивает) тип функции, который может быть выведен системой типизации самостоятельно. Эта строка может быть прочитана как: функция fac имеет тип (::) из целого в целое (Integer -> Integer). Это значит, что она получает на вход один целочисленный аргумент и возвращает результат также целого типа. Как сказано выше, типы всех функций могут быть выведены автоматически, если программист явно не указал их.
 Вторая строка основана на механизме сопоставления с образцами, который является важной особенностью языка Haskell. Этот механизм заставляет интерпретатор языка пробегаться сверху вниз по строкам определения и находить первый образец (то есть набор формальных параметров, который подходит под значения фактически переданных параметров в функцию) и выполнять определение, записанное с этим образцом. В данном случае вторая строка определения будет выбрана тогда, когда фактический параметр при вызове функции fac будет равен нулю.
 В третьей строке помимо механизма сопоставления с образцами использовано охраняющее выражение — n > 0. Оно гарантирует, что функция не будет работать для отрицательных чисел, для которых факториал неопределён. Если отрицательное число будет передано в качестве фактического параметра в функцию fac, то программа остановится с сообщением об ошибке.
 [править] Калькулятор Простейший калькулятор для вычисления выражений в обратной польской записи может быть определён на языке Haskell при помощи одной функции:
     calc :: String -> [Float]  calc = foldl f [] . words    where      f (x:y:zs) "+" = (y + x):zs     f (x:y:zs) "-" = (y - x):zs     f (x:y:zs) "*" = (y * x):zs     f (x:y:zs) "/" = (y / x):zs     f xs y         = read y : xs  В данном определении функция левосторонней свёртки (foldl) вызывается с фактическими параметрами [] (пустой список — начальное значение для свёртки), f (функция для интерпретации одного слова во входном выражении) и списка, полученного разбивкой исходной строки с выражением на слова, то есть строки, отделённые друг от друга пробельными символами. В результате работы получается список, который содержит промежуточные и окончательное значения, получаемые при вычислении входного выражения.
 [править] Числа Фибоначчи Другой пример показывает способ вычисления бесконечного списка чисел Фибоначчи за линейное время:
    fibs = 0 : 1 : zipWith (+) fibs (tail fibs)   Бесконечный список создаётся при помощи механизма корекурсии — последующие значения списка вычисляются на основе имеющихся с начальными 0 и 1 в качестве первых двух элементов списка. Это определение является примером применения механизма ленивых вычислений, который является важнейшей частью языка Haskell. Для понимания того, как это определение работает, можно рассмотреть вычисление первых шести чисел Фибоначчи при помощи этой функции:
  fibs         = 0 : 1 : 1 : 2 : 3 : 5 : ...               +   +   +   +   +   +tail fibs    = 1 : 1 : 2 : 3 : 5 : ...               =   =   =   =   =   =zipWith ...  = 1 : 2 : 3 : 5 : 8 : ...fibs = 0 : 1 : 1 : 2 : 3 : 5 : 8 : ... Та же самая функция может быть записана короче и более понятно при использовании расширения языка Haskell, которое реализовано в компиляторе GHC (параллелизация определителей списков, Parallel List Comprehensions):
     fibs = 0 : 1 : [a + b | a <- fibs                       | b <- tail fibs]   [править] Простые числа В этих примерах показано, как можно использовать списочные выражения (генераторы списков, list comprehensions). Реализация нахождения всех простых чисел обычным путём (проверка каждого числа на простоту).
     -- общее определение (все натуральные числа, которые являются простыми :-)  primes = [n | n <- [2..], isPrime n]   -- список остатков от деления n на все числа  -- из диапазона [2..n/2]  listOfRemainders n =[n `mod` x | x <- [2..(n `div` 2)]]   -- Число простое, если приведённый выше список не содержит нулей  isPrime n = null (filter (==0) (listOfRemainders n))   а также с помощью решета Эратосфена:
     ero = eroPrimes [2..]  eroPrimes (x : xs) = x : eroPrimes [y | y <- xs , y `mod` x /= 0]   И получение, вообще говоря, бесконечного списка простых чисел:
     listOfPrimes = [n | n <- [2..], and [n `mod` (n-x) /= 0 | x <- [1..n-2] ] ]   [править] Описание игральных карт Простой пример использования алгебраических типов данных для описания игральных карт. Идентификаторы типов начинаются с заглавных букв. Идентификаторы переменных и функций — со строчных. Новые алгебраические типы определяются ключевым словом data. Синонимы типов определяются ключевым словом type.
    -- Алгебраический тип-сумма Масть («перечисление»). -- Значением типа Масть может быть одно из указанных справа -- (или Пики, или Трефы, или Бубны, или Червы). -- «Масть» здесь выступает конструктором _типа_, -- а «Пики», «Трефы» и т.д. — конструкторами _данных_. data Масть = Пики | Трефы | Бубны | Червы  -- необязательное автоматическое выведение экземпляров классов,   -- позволяющее преобразовывать значения в строки (функцией show из Show)   -- и обратно (функцией read из Read), а также сравнивать их между собой   -- (функциями классов Eq и Ord).   deriving (Show, Read, Eq, Ord)  -- Алгебраический тип-сумма Достоинство data Достоинство = Семёрка | Восьмёрка | Девятка | Десятка                 | Валет | Дама | Король | Туз  deriving (Show, Read, Eq, Ord)  -- Алгебраический тип-произведение Карта («тип-кортеж»). -- Значения типа Карта — комбинации значений типов Достоинство и Масть, -- объединённые конструктором данных К. -- Часто имена конструктора данных и конструктора типа совпадают. data Карта = К Достоинство Масть  deriving (Show, Read, Eq, Ord)  -- Синоним списка значений типа Карта. type Рука = [Карта]  -- Функция, определяющая, есть ли в руке марьяж (король и дама одной масти). естьМарьяж :: Рука -> Bool естьМарьяж карты =    -- достаточно найти марьяж хотя бы одной масти    any (естьМарьяжМасти) [Пики, Трефы, Бубны, Червы]    where      -- проверить, есть ли и дама, и король заданной масти м в руке      естьМарьяжМасти м = (К Дама м) `elem` карты && (К Король м) `elem` карты -- примеры раздач рука = [ К Дама Трефы, К Семёрка Червы, К Король Трефы, К Туз Бубны ] рука_без_марьяжа = [ К Десятка Пики, К Король Пики, К Дама Червы ]  main = do   проверить рука  проверить рука_без_марьяжа  проверить [] -- пустая раздача   where     проверить кк = putStrLn ( (show кк) ++ " -> " ++ (show (естьМарьяж кк)) )  -- Вывод: -- [К Дама Трефы,К Семёрка Червы,К Король Трефы,К Туз Бубны] -> True -- [К Десятка Пики,К Король Пики,К Дама Червы] -> False -- [] -> False   [править] Численное интегрирование Численное интегрирование  методом трапеций:
    trapezeIntegrate f a b n =     ((sum $ map f [a + h, a + 2*h .. b - h]) + t) * h    where         t = (f a + f b)/2        h = (b - a) / n main = do     print $ trapezeIntegrate (\x -> x*sin x) 0 (2*pi) 100  -- Вывод: -6.281118086046067   [править] Проверка палиндромов Как видно, Хаскель прекрасно работает с Юникодом.
    import Char -- функции toLower и isAlpha  palindrom :: [Char] -> Bool palindrom s =     norm == reverse norm    where norm = map toLower . filter (isAlpha) $ s test :: [Char] -> IO () test s =     putStrLn $ s ++ ": " ++ show (palindrom s)  main = do     test "А в Енисее — синева"     test "А роза упала не на лапу Азора"     test "Не роза упала на лапу Азора"     test "Мир как Рим"     test "Мир не Рим"     test "Dogma: I am God"     test "I prefer Pi"     test "حوت فمه مفتوح"     test "Ne mateno, bone tamen"  -- Вывод: -- А в Енисее — синева: True -- А роза упала не на лапу Азора: True -- Не роза упала на лапу Азора: False -- Мир как Рим: True -- Мир не Рим: False -- Dogma: I am God: True -- I prefer Pi: True -- حوت فمه مفتوح: True -- Ne mateno, bone tamen: True   [править] Приложения, написанные на языке Haskell Мозаичный оконный менеджер Xmonad для X Window System целиком написан на Хаскеле. Darcs — распределённая система управления версиями с рядом уникальных возможностей — написана на Хаскеле. Первая реализация компилятора и интерпретатора языка Perl6, Pugs, была написана на Хаскеле за несколько месяцев. Компилятор GHC часто выступает экспериментальной площадкой для проверки новых возможностей функционального программирования и оптимизации.
 [править] Проприетарные приложения Хаскель всё чаще используется в коммерческой среде[10]. Этому способствует и принятая в сообществе традиция выпускать библиотеки под либеральными лицензиями (более 70% свободно доступных библиотек распространяются на условиях лицензий BSD, MIT или являются общественным достоянием).
 Вот примеры некоторых коммерческих приложений, написанных на Хаскеле: Bluespec SystemVerilog, язык проектирования и верификации полупроводниковых схем, является расширением Хаскеля[11]. Cryptol, коммерческий язык для разработки и проверки криптографических алгоритмов, реализован на Хаскеле. Примечательно, что первое формально верифицированное микроядро seL4 было тоже написано на Хаскеле.
 Активно применяется Хаскель в области финансового программирования, анализа рисков, в системах поддержки решений. Хаскель применяют разработчики генератора городских ландшафтов для игр и моделирования Gamr7. Есть примеры успешного применения Хаскеля для разработки частных информационных систем в коммерческих организациях, как в мире, так и в странах СНГ[12].
 [править] Приложения с открытым исходным кодом Также на Хаскеле написано много приложений c открытым исходным кодом. Большинство из них доступны в архиве Hackage. Вот некоторые из них:
 [править] Базы данных Более полный список см. в Hackage:Databases
 
- haskelldb — строго типизированный интерфейс доступа к SQL-базам данных
-HDBC — универсальный интерфейс доступа к реляционным базам данных (поддерживаются SQLite, MySQL, PostgreSQL, ODBC)
 -Takusen — библиотека доступа к базам данных, использующая интерфейс левой свёртки
 -есть библиотеки для работы с BerkleyDB, CouchDB, MongoDB, Redis, TokyoCabinet/TokyoTyrant, SimpleDB, SQLite
 
 [править] Графика Более полный список см. в Hackage:Graphics.
 
- Blobs — редактор диаграмм
-Diagrams — библиотека для программирования схем и диаграмм
 -FieldTrip — библиотека для функционального описания 3D-объектов
 -Glome — один из множества трассировщиков лучей на Хаскеле
 -GLUT и OpenGL — интерфейсы для использования GLUT и OpenGL из Хаскеля
 -GPipe — функциональный интерфейс для программирования GPU
 -Grapefruit — библиотека для функционального реактивного программирования графики и интерфейсов
 -Haven — библиотека отрисовки масштабируемой векторной графики
 -HaskellCharts — библиотека для отрисовки двумерных графиков
 -SDL — интерфейс для использования libSDL из Хаскеля
 -Yampa — библиотека для функционального реактивного программирования с помощью стрелок
 
 [править] Графические интерфейсы Более полный список см. в Hackage:GUI.
 
- Gtk2Hs — библиотека для создания графических интерфейсов на основе GTK+
-Grapefruit и wxFruit — библиотеки декларативного программирования интерфейсов (на основе реактивного программирования)
 -qtHaskell — библиотека для создания графических интерфейсов на основе Qt
 -wxHaskell — библиотека для создания графических интерфейсов на основе wxWidgets
 
 [править] Игры Более полный список см. в Hackage:Games.
 
- bloxorz — трёхмерная логическая игра
-Frag — трёхмерный шутер от первого лица
 -monadius — двумерный скроллер
 -Raincat — рисованная игра-головоломка
 
 [править] Интернет Более полный список см. в Hackage:Network
 
- gitit – вики-платформа, основанная на системах контроля версиями (darcs, git или mercurial)
-happstack — фреймворк для веб-программирования (аналог Django или Ruby on Rails)
 -Twidge — терминальный клиент для микроблоггинга
 
 [править] Обработка текста Более полный список см. в Hackage:Text
 
- HaXml — многофункциональная библиотека для работы с XML
-HXT — комбинаторная библиотека для работы с XML, использующая выразительный предметно-ориентированный язык, основанный на стрелках
 -Leksah [1] – интегрированная среда разработки (IDE), написанная на Хаскеле и, в основном, для разработки на Хаскеле; поддерживает навигацию по исходным текстом, «умное» автодополнение, отладку и сборку пакетов.
 -Pandoc – универсальный конвертер текста между различными языками разметки
 -Parsec — комбинаторная библиотека для синтаксического анализа
 -The Grammatical Framework — библиотека для работы с текстом на естественных языках
 -Yi – подобный Emacs-у текстовый редактор, использует Хаскель также и в качестве скриптового языка
 
 [править] Параллельное, многозадачное и многопоточное программирование 
- CHP — Communicating Haskell Processes, библиотека, реализующая модель параллельных процессов без общей памяти
-Data Parallel Haskell — расширение языка, обеспечивающие параллелизм данных на многоядерных процессорах
 -parallel — стандартная библиотека для параллельного программирования
 -STM — библиотека реализующая Software Transactional Memory
 
 [править] Разработка Более полный список см. в Hackage:Development
 
- alex — генератор лексических анализаторов
-cabal-install — инструмент для сетевой установки, автоматической сборки и развёртывания приложений на Haskell
 -happy — генератор синтаксических анализаторов
 -haddock – инструмент автоматической генерации документации для библиотек Haskell
 -HUnit — библиотека для модульного тестирования
 -QuickCheck — библиотека для автоматического тестирования
 
 [править] Системные программы Более полный список см. в Hackage:System
 
- Darcs — продвинутая распределённая система контроля версий
-House – операционная система, написанная на Хаскеле
 -Xmonad — популярный мозаичный менеджер окон
 
 [править] Языки и компиляторы Более полный список см. в Hackage:Language
 
- Agda – язык программирования с зависимыми типами и доказатель теорем
-Curry — функциональный логический язык Curry
 -cpphs – реализация препроцессора языка Си
 -Epigram — язык программирования с зависимыми типами
 -Flapjax — язык для реактивного программирования веб-приложений
 -Language.Python — библиотека лексического и синтаксического анализа кода на языке Python
 -Language.C — библиотека анализа и генерации кода на языке Си
 -Lava — язык аппаратных схем
 -llvm — интерфейс для работы с LLVM из Хаскеля
 -Pugs — компилятор и интерпретатор языка Perl 6
 -WebBits — библиотека для работы с кодом на языке Javascript
 
 [править] См. также 
- Сравнение возможностей Haskell с другими языками см. в статье Сравнение языков программирования

 [править] Примечания  - ↑ Curry, Haskell (1934), "Functionality in Combinatory Logic", Proceedings of the National Academy of Sciences, vol. 20, pp. 584–590
-↑ Curry, Haskell B. & Feys, Robert (1958), Combinatory Logic Vol. I, Amsterdam: North-Holland, with 2 sections by William Craig, see paragraph 9E
 -↑ HaskellWiki — по состоянию на 05.02.2010.
 -↑ The Haskell 98 Language Report — получено 05.02.2010
 -↑ Haskell Prime
 -↑ Simon Marlow, Announcing Haskell 2010
 -↑ Реализации языка Хаскель (англ.)
 -↑ Merge Request: LLVM Code Generator for GHC
 -↑ Smoking fast Haskell code using GHC’s new LLVM codegen
 -↑ (англ.)Коммерческие применения языка Хаскель
 -↑ Bluespec
 -↑ Астапов ДмитрийИспользование Haskell при поддержке критически важной для бизнеса информационной системы // Практика функционального программирования : Журнал. — 2009. — №2. — С.53—69.
   [править] Литература 
- Bryan O’Sullivan, John Goerzen, Don Stewart. Real World Haskell — O’Reilly, 2008—710 C. ISBN 0-596-51498-0. ISBN 978-0-596-51498-3
-Душкин Роман Викторович Функциональное программирование на языке Haskell / Гл. ред. Д. А. Мовчан;. — М.: ДМК Пресс,, 2008. — 544 с., ил.с. — 1500 экз. — ISBN 5-94074-335-8
 
 
- Graham Hutton. «Programming in Haskell». Cambrige University Press. ISBN 978-0-521-87172-3. ISBN 978-0-521-69269-4
-Kees Doets, Jan van Eijck. «The Haskell Road to Logic, Maths and Programming». ISBN 0-9543006-9-6.
 
 [править] Ссылки   Имеется викиучебник потеме
 «Haskell» 
- http://www.haskell.org/ — Сайт, посвящённый функциональному программированию в общем и языку Haskell в частности. Содержит различные справочные материалы, список интерпретаторов и компиляторов Haskell’а (в настоящий момент, все интерпретаторы и компиляторы бесплатны). Кроме того, имеется обширный список ссылок на ресурсы по теории функционального программирования и другим языкам (Standard ML, Clean).
-http://www.haskell.ru/ — Полный перевод описания языка Haskell на русский язык.
 -http://www.roman-dushkin.narod.ru/fp.html — Курс лекций по функциональному программированию, читаемый в МИФИ с 2001 года.
 -http://kchri.narod.ru — Курс лекций и лабораторные работы на Haskell
 -Мягкое введение в Haskell, часть 2
 -Функциональные типы и композиция функций в Хаскелле
 -ЖЖ-сообщества: ru_lambda и ru_declarative
 -Санкт-Петербургская группа пользователей Haskell
 -http://eclipsefp.sourceforge.net/ — Расширение среды разработки Eclipse для программирования на Haskell
 -ФП: lazy evaluation — это завтрашние результаты вычисления функций уже сегодня
 -Набор вариантов кода для вычисления факториала на языке Haskell
 
 

   Трансляторы языка Haskell     Интерпретаторы: HBI | HUGS
 	 Компиляторы: GHC | HBC | Helium | JHC | NHC | YHC
 	 
       п·о·р  Основные языки программирования (список• сравнение• IDE• история• хронология)
 Используемые
 в разработке  Ада • АПЛ • Ассемблер • ActionScript • ABAP/4 • AutoIt • AWK • BASIC • C • Кобол • C++ • C# • Cω • ColdFusion • Common Lisp • D • dBase • Delphi • Eiffel • Erlang • F# • Forth • Фортран • Gambas • Groovy • Haskell • Icon • Java • JavaScript • Limbo • Lua • MATLAB • Object Pascal • Objective-C • OCaml • Oz • Оберон • Parser • Паскаль • Perl • PHP • PowerBASIC • PureBasic • Python • ПЛ/1 • Пролог • Ruby • Scala • Scheme • Smalltalk • SQL • PL/SQL • Tcl • Vala • Visual Basic • VB.NET
  	 
 Академические  Clean • Curry • Лого • ML • Модула-3 • Рефал • Симула
  	 
 IEC61131-3  Instruction List • ST • FBD • Ladder Diagram • SFC
  	 
 Прочие  Алгол • Алгол 68 • Модула-2 • Miranda • Hope
  	 
 Эзотерические  HQ9+/HQ9++ • INTERCAL • Brainfuck • Befunge • Malbolge • Piet • Spoon • Unlambda • Whitespace • FALSE
  	 
      	Для улучшения этой статьи желательно?:  
 -Проставив сноски, внести более точные указания на источники.
 
  	 	 
       Источник — «http://ru.wikipedia.org/wiki/Haskell» 		Категории: Появились в 1990 году | Языки программирования по алфавиту | Haskell | Функциональные языки программированияСкрытая категория: Википедия:Статьи без сносок		 				 	   	 		Просмотры 		 			
- 				 Статья
-Обсуждение
 				 -Править
 				 -история
 			
 		 	 	 		Личные инструменты 		 			
- 				Опробовать бета-версию
-Представиться / зарегистрироваться
 			
 		 	 	 		 	 	 	 		Навигация 		 			
- 				Заглавная страница
-Рубрикация
 				-Указатель А — Я
 				-Избранные статьи
 				-Случайная статья
 				-Текущие события
 			
 		 	 	 		Поиск 		 			 				 				 								 			 		 	 	 		Участие 		 			
- 				Сообщить об ошибке
-Портал сообщества
 				-Форум
 				-Свежие правки
 				-Новые страницы
 				-Справка
 				-Пожертвования
 			
 		 	 	 		Печать/экспорт 		 
-Создать книгу
-Скачать как PDF
-Версия для печати

		 	 	 		Инструменты 		 			
- 				Ссылки сюда
-Связанные правки
 -Спецстраницы
 				-Постоянная ссылка
-Цитировать страницу
			
 		 	 	 		На других языках 		 			
- 				Български
-Català
 				-Česky
 				-Deutsch
 				-Ελληνικά
 				-English
 				-Esperanto
 				-Español
 				-Eesti
 				-فارسی
 				-Suomi
 				-Français
 				-Galego
 				-עברית
 				-Hrvatski
 				-Magyar
 				-Italiano
 				-日本語
 				-한국어
 				-Latina
 				-Latviešu
 				-Bahasa Melayu
 				-Nederlands
 				-Polski
 				-Português
 				-Română
 				-Slovenčina
 				-Slovenščina
 				-Svenska
 				-Türkçe
 				-Українська
 				-中文
 			
 		 	    	 	 	
- 		 Последнее изменение этой страницы: 13:24, 23 апреля 2010.
-Текст доступен на условиях лицензии Creative Commons Attribution/Share-Alike, в отдельных случаях могут действовать дополнительные условия. Подробнее см. Условия использования.
 		-Политика конфиденциальности
 		-Описание Википедии
 		-Отказ от ответственности
 	
      
links
#column-one
#searchInput
/wiki/%D0%A4%D0%B0%D0%B9%D0%BB:Haskell-Logo-Variation.png
/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5
/wiki/%D0%9E%D1%82%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5_%D0%B2%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F
/wiki/%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D1%8C_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)
/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%82%D0%BE%D1%80
/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BF%D1%80%D0%B5%D1%82%D0%B0%D1%82%D0%BE%D1%80
/wiki/1990
/wiki/%D0%A2%D0%B8%D0%BF_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85
/wiki/%D0%A1%D1%82%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D1%82%D0%B8%D0%BF%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F
/wiki/%D0%A1%D1%82%D1%80%D0%BE%D0%B3%D0%B0%D1%8F_%D1%82%D0%B8%D0%BF%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F
/wiki/%D0%92%D1%8B%D0%B2%D0%BE%D0%B4_%D1%82%D0%B8%D0%BF%D0%BE%D0%B2
/wiki/Glasgow_Haskell_Compiler
/wiki/HUGS
/wiki/Another_Haskell_Compiler
/w/index.php?title=York_Haskell_Compiler&amp;action=edit&amp;redlink=1
/wiki/Gofer
/wiki/Lisp
/wiki/Scheme_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/ISWIM
http://en.wikipedia.org/wiki/FP_(programming_language)
/wiki/%D0%90%D0%9F%D0%9B_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/Hope_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
http://en.wikipedia.org/wiki/SISAL
/wiki/%D0%9C%D0%B8%D1%80%D0%B0%D0%BD%D0%B4%D0%B0_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/ML
/wiki/Standard_ML
http://en.wikipedia.org/wiki/Lazy_ML
http://en.wikipedia.org/wiki/Orwell_(programming_language)
http://en.wikipedia.org/wiki/Id_(programming_language)
http://en.wikipedia.org/wiki/Agda_(theorem_prover)
http://en.wikipedia.org/wiki/Bluespec,_Inc.
/wiki/Clojure
/wiki/C_Sharp
http://en.wikipedia.org/wiki/Quark_Framework
http://en.wikipedia.org/wiki/Cat_(programming_language)
http://en.wikipedia.org/wiki/Cayenne_(programming_language)
/wiki/Clean
/wiki/Curry
http://en.wikipedia.org/wiki/Epigram_(programming_language)
http://en.wikipedia.org/wiki/Escher_(programming_language)
/wiki/F_Sharp
/wiki/Factor_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
http://en.wikipedia.org/wiki/Isabelle_theorem_prover
/wiki/%D0%9E%D0%B1%D0%BE%D0%B1%D1%89%D1%91%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5#Java
/wiki/LINQ
/wiki/Mercury_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
http://en.wikipedia.org/wiki/%CE%A9mega_interpreter
/wiki/Perl_6
/wiki/Python_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
http://en.wikipedia.org/wiki/Qi_(programming_language)
/wiki/Scala_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
http://en.wikipedia.org/wiki/Timber_(programming_language)
/wiki/Visual_Basic_.NET
http://haskell.org
/wiki/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA
/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5
/wiki/%D0%AF%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F
/wiki/%D0%9E%D1%82%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5_%D0%B2%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F
/wiki/%D0%A1%D1%82%D1%80%D0%BE%D0%B3%D0%B0%D1%8F_%D1%82%D0%B8%D0%BF%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F
/wiki/%D0%A1%D1%82%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D1%82%D0%B8%D0%BF%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F
/wiki/%D0%92%D1%8B%D0%B2%D0%BE%D0%B4_%D1%82%D0%B8%D0%BF%D0%BE%D0%B2
/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)
/wiki/%D0%9A%D0%B0%D1%80%D1%80%D0%B8,_%D0%A5%D0%B0%D1%81%D0%BA%D0%B5%D0%BB%D0%BB
#cite_note-0
#cite_note-1
/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D0%B1%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D1%8C
/wiki/%D0%9C%D0%BD%D0%BE%D0%B3%D0%BE%D0%BF%D0%BE%D1%82%D0%BE%D1%87%D0%BD%D0%BE%D1%81%D1%82%D1%8C
/wiki/%D0%9F%D0%B0%D1%80%D0%B0%D0%BB%D0%BB%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5_%D0%B2%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F
/wiki/%D0%A2%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE_%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D1%8F
/wiki/%D0%9E%D1%82%D0%BB%D0%B0%D0%B4%D0%BA%D0%B0
/wiki/%D0%9F%D1%80%D0%BE%D1%84%D0%B8%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)
/wiki/%D0%9E%D1%82%D0%BA%D1%80%D1%8B%D1%82%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B5_%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5
#cite_note-2
#.D0.98.D1.81.D1.82.D0.BE.D1.80.D0.B8.D1.8F
#.D0.A5.D0.B0.D1.80.D0.B0.D0.BA.D1.82.D0.B5.D1.80.D0.B8.D1.81.D1.82.D0.B8.D0.BA.D0.B8_.D1.8F.D0.B7.D1.8B.D0.BA.D0.B0
#.D0.A0.D0.B5.D0.B0.D0.BB.D0.B8.D0.B7.D0.B0.D1.86.D0.B8.D0.B8_.D1.8F.D0.B7.D1.8B.D0.BA.D0.B0
#.D0.9A.D0.BE.D0.BC.D0.BF.D0.B8.D0.BB.D1.8F.D1.82.D0.BE.D1.80.D1.8B_.D0.B8_.D0.B8.D0.BD.D1.82.D0.B5.D1.80.D0.BF.D1.80.D0.B5.D1.82.D0.B0.D1.82.D0.BE.D1.80.D1.8B
#Haskell_Platform
#.D0.90.D0.BB.D1.8C.D1.82.D0.B5.D1.80.D0.BD.D0.B0.D1.82.D0.B8.D0.B2.D0.BD.D1.8B.D0.B5_.D1.86.D0.B5.D0.BB.D0.B5.D0.B2.D1.8B.D0.B5_.D0.BF.D0.BB.D0.B0.D1.82.D1.84.D0.BE.D1.80.D0.BC.D1.8B
#.D0.A0.D0.B0.D1.81.D1.88.D0.B8.D1.80.D0.B5.D0.BD.D0.B8.D1.8F_.D1.8F.D0.B7.D1.8B.D0.BA.D0.B0
#.D0.9F.D1.80.D0.B8.D0.BC.D0.B5.D1.80.D1.8B
#.D0.92.D1.8B.D1.87.D0.B8.D1.81.D0.BB.D0.B5.D0.BD.D0.B8.D0.B5_.D1.84.D0.B0.D0.BA.D1.82.D0.BE.D1.80.D0.B8.D0.B0.D0.BB.D0.B0
#.D0.9A.D0.B0.D0.BB.D1.8C.D0.BA.D1.83.D0.BB.D1.8F.D1.82.D0.BE.D1.80
#.D0.A7.D0.B8.D1.81.D0.BB.D0.B0_.D0.A4.D0.B8.D0.B1.D0.BE.D0.BD.D0.B0.D1.87.D1.87.D0.B8
#.D0.9F.D1.80.D0.BE.D1.81.D1.82.D1.8B.D0.B5_.D1.87.D0.B8.D1.81.D0.BB.D0.B0
#.D0.9E.D0.BF.D0.B8.D1.81.D0.B0.D0.BD.D0.B8.D0.B5_.D0.B8.D0.B3.D1.80.D0.B0.D0.BB.D1.8C.D0.BD.D1.8B.D1.85_.D0.BA.D0.B0.D1.80.D1.82
#.D0.A7.D0.B8.D1.81.D0.BB.D0.B5.D0.BD.D0.BD.D0.BE.D0.B5_.D0.B8.D0.BD.D1.82.D0.B5.D0.B3.D1.80.D0.B8.D1.80.D0.BE.D0.B2.D0.B0.D0.BD.D0.B8.D0.B5
#.D0.9F.D1.80.D0.BE.D0.B2.D0.B5.D1.80.D0.BA.D0.B0_.D0.BF.D0.B0.D0.BB.D0.B8.D0.BD.D0.B4.D1.80.D0.BE.D0.BC.D0.BE.D0.B2
#.D0.9F.D1.80.D0.B8.D0.BB.D0.BE.D0.B6.D0.B5.D0.BD.D0.B8.D1.8F.2C_.D0.BD.D0.B0.D0.BF.D0.B8.D1.81.D0.B0.D0.BD.D0.BD.D1.8B.D0.B5_.D0.BD.D0.B0_.D1.8F.D0.B7.D1.8B.D0.BA.D0.B5_Haskell
#.D0.9F.D1.80.D0.BE.D0.BF.D1.80.D0.B8.D0.B5.D1.82.D0.B0.D1.80.D0.BD.D1.8B.D0.B5_.D0.BF.D1.80.D0.B8.D0.BB.D0.BE.D0.B6.D0.B5.D0.BD.D0.B8.D1.8F
#.D0.9F.D1.80.D0.B8.D0.BB.D0.BE.D0.B6.D0.B5.D0.BD.D0.B8.D1.8F_.D1.81_.D0.BE.D1.82.D0.BA.D1.80.D1.8B.D1.82.D1.8B.D0.BC_.D0.B8.D1.81.D1.85.D0.BE.D0.B4.D0.BD.D1.8B.D0.BC_.D0.BA.D0.BE.D0.B4.D0.BE.D0.BC
#.D0.91.D0.B0.D0.B7.D1.8B_.D0.B4.D0.B0.D0.BD.D0.BD.D1.8B.D1.85
#.D0.93.D1.80.D0.B0.D1.84.D0.B8.D0.BA.D0.B0
#.D0.93.D1.80.D0.B0.D1.84.D0.B8.D1.87.D0.B5.D1.81.D0.BA.D0.B8.D0.B5_.D0.B8.D0.BD.D1.82.D0.B5.D1.80.D1.84.D0.B5.D0.B9.D1.81.D1.8B
#.D0.98.D0.B3.D1.80.D1.8B
#.D0.98.D0.BD.D1.82.D0.B5.D1.80.D0.BD.D0.B5.D1.82
#.D0.9E.D0.B1.D1.80.D0.B0.D0.B1.D0.BE.D1.82.D0.BA.D0.B0_.D1.82.D0.B5.D0.BA.D1.81.D1.82.D0.B0
#.D0.9F.D0.B0.D1.80.D0.B0.D0.BB.D0.BB.D0.B5.D0.BB.D1.8C.D0.BD.D0.BE.D0.B5.2C_.D0.BC.D0.BD.D0.BE.D0.B3.D0.BE.D0.B7.D0.B0.D0.B4.D0.B0.D1.87.D0.BD.D0.BE.D0.B5_.D0.B8_.D0.BC.D0.BD.D0.BE.D0.B3.D0.BE.D0.BF.D0.BE.D1.82.D0.BE.D1.87.D0.BD.D0.BE.D0.B5_.D0.BF.D1.80.D0.BE.D0.B3.D1.80.D0.B0.D0.BC.D0.BC.D0.B8.D1.80.D0.BE.D0.B2.D0.B0.D0.BD.D0.B8.D0.B5
#.D0.A0.D0.B0.D0.B7.D1.80.D0.B0.D0.B1.D0.BE.D1.82.D0.BA.D0.B0
#.D0.A1.D0.B8.D1.81.D1.82.D0.B5.D0.BC.D0.BD.D1.8B.D0.B5_.D0.BF.D1.80.D0.BE.D0.B3.D1.80.D0.B0.D0.BC.D0.BC.D1.8B
#.D0.AF.D0.B7.D1.8B.D0.BA.D0.B8_.D0.B8_.D0.BA.D0.BE.D0.BC.D0.BF.D0.B8.D0.BB.D1.8F.D1.82.D0.BE.D1.80.D1.8B
#.D0.A1.D0.BC._.D1.82.D0.B0.D0.BA.D0.B6.D0.B5
#.D0.9F.D1.80.D0.B8.D0.BC.D0.B5.D1.87.D0.B0.D0.BD.D0.B8.D1.8F
#.D0.9B.D0.B8.D1.82.D0.B5.D1.80.D0.B0.D1.82.D1.83.D1.80.D0.B0
#.D0.A1.D1.81.D1.8B.D0.BB.D0.BA.D0.B8
/w/index.php?title=Haskell&amp;action=edit&amp;section=1
/wiki/ML
/wiki/%D0%9C%D0%B8%D1%80%D0%B0%D0%BD%D0%B4%D0%B0_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/%D0%A2%D1%91%D1%80%D0%BD%D0%B5%D1%80,_%D0%94%D1%8D%D0%B2%D0%B8%D0%B4
/wiki/%D0%9F%D1%80%D0%BE%D0%BF%D1%80%D0%B8%D0%B5%D1%82%D0%B0%D1%80%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B5_%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5
/wiki/%D0%9E%D1%82%D0%BA%D1%80%D1%8B%D1%82%D1%8B%D0%B9_%D1%81%D1%82%D0%B0%D0%BD%D0%B4%D0%B0%D1%80%D1%82
#cite_note-3
/wiki/Glasgow_Haskell_Compiler
#cite_note-4
#cite_note-5
/w/index.php?title=Haskell&amp;action=edit&amp;section=2
/wiki/%D0%9B%D1%8F%D0%BC%D0%B1%D0%B4%D0%B0-%D0%B8%D1%81%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5
/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F_%D0%B2%D1%8B%D1%81%D1%88%D0%B5%D0%B3%D0%BE_%D0%BF%D0%BE%D1%80%D1%8F%D0%B4%D0%BA%D0%B0
/wiki/%D0%A7%D0%B8%D1%81%D1%82%D0%BE%D1%82%D0%B0_%D1%8F%D0%B7%D1%8B%D0%BA%D0%B0_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F
/wiki/%D0%9B%D0%B5%D0%BD%D0%B8%D0%B2%D1%8B%D0%B5_%D0%B2%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F
/wiki/%D0%A1%D0%BE%D0%BF%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D1%81_%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D1%86%D0%BE%D0%BC
/wiki/%D0%9F%D0%BE%D0%BB%D0%B8%D0%BC%D0%BE%D1%80%D1%84%D0%B8%D0%B7%D0%BC_%D0%B2_%D1%8F%D0%B7%D1%8B%D0%BA%D0%B0%D1%85_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F
/w/index.php?title=%D0%9A%D0%BB%D0%B0%D1%81%D1%81_%D1%82%D0%B8%D0%BF%D0%BE%D0%B2&amp;action=edit&amp;redlink=1
/wiki/%D0%A1%D1%82%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D1%82%D0%B8%D0%BF%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F
/wiki/%D0%9C%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C_%D1%82%D0%B8%D0%BF%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8_%D0%A5%D0%B8%D0%BD%D0%B4%D0%BB%D0%B8_%E2%80%94_%D0%9C%D0%B8%D0%BB%D0%BD%D0%B5%D1%80%D0%B0
/wiki/%D0%90%D0%BB%D0%B3%D0%B5%D0%B1%D1%80%D0%B0%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D1%82%D0%B8%D0%BF_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85
/wiki/%D0%A0%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D1%8F
/wiki/%D0%98%D0%BD%D0%BA%D0%B0%D0%BF%D1%81%D1%83%D0%BB%D1%8F%D1%86%D0%B8%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)
/w/index.php?title=%D0%93%D0%B5%D0%BD%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D1%8B_%D1%81%D0%BF%D0%B8%D1%81%D0%BA%D0%BE%D0%B2&amp;action=edit&amp;redlink=1
/wiki/%D0%9E%D1%85%D1%80%D0%B0%D0%BD%D0%B0_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)
/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5
/wiki/%D0%9C%D0%BE%D0%BD%D0%B0%D0%B4%D0%B0_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)
/wiki/%D0%98%D0%BC%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F
/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81
http://www.cse.unsw.edu.au/~chak/haskell/ffi/
/wiki/%D0%9F%D0%BE%D0%BB%D0%B8%D0%BC%D0%BE%D1%80%D1%84%D0%B8%D0%B7%D0%BC_%D0%B2_%D1%8F%D0%B7%D1%8B%D0%BA%D0%B0%D1%85_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F#.D0.92_.D1.84.D1.83.D0.BD.D0.BA.D1.86.D0.B8.D0.BE.D0.BD.D0.B0.D0.BB.D1.8C.D0.BD.D1.8B.D1.85_.D1.8F.D0.B7.D1.8B.D0.BA.D0.B0.D1.85
/w/index.php?title=Haskell&amp;action=edit&amp;section=3
#cite_note-6
/w/index.php?title=Haskell&amp;action=edit&amp;section=4
/wiki/Glasgow_Haskell_Compiler
/wiki/REPL
/wiki/HUGS
/wiki/%D0%A1%D0%B8_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/REPL
/wiki/%D0%A1%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B2%D1%8B%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA
/wiki/Lisp
/w/index.php?title=Haskell&amp;action=edit&amp;section=5
http://hackage.haskell.org/platform/
/w/index.php?title=Haskell&amp;action=edit&amp;section=6
/wiki/%D0%9C%D0%B0%D1%88%D0%B8%D0%BD%D0%BD%D1%8B%D0%B9_%D0%BA%D0%BE%D0%B4
/wiki/%D0%92%D0%B8%D1%80%D1%82%D1%83%D0%B0%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F_%D0%BC%D0%B0%D1%88%D0%B8%D0%BD%D0%B0
/wiki/Low_Level_Virtual_Machine
http://www.haskell.org/pipermail/cvs-ghc/2010-February/052606.html
#cite_note-7
#cite_note-8
http://wiki.brianweb.net/LambdaVM/LambdaVM
http://semantic.org/jvm-bridge/
http://www.scdi.org/~avernet/projects/jaskell/
http://tom.lokhorst.eu/ehc/clr/
http://www.haskell.org/haskellwiki/GHC:FAQ#Why_isn.27t_GHC_available_for_.NET_or_on_the_JVM.3F
http://vir.mskhug.ru/
http://haskell.org/haskellwiki/Yhc/Javascript
/w/index.php?title=Haskell&amp;action=edit&amp;section=7
http://www.haskell.org/th
/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5
/wiki/%D0%9C%D0%BD%D0%BE%D0%B3%D0%BE%D0%BF%D0%BE%D1%82%D0%BE%D1%87%D0%BD%D0%BE%D1%81%D1%82%D1%8C
/wiki/%D0%9F%D0%B0%D1%80%D0%B0%D0%BB%D0%BB%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5_%D0%B2%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F
/wiki/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B5_%D0%B2%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F
/w/index.php?title=Haskell&amp;action=edit&amp;section=8
/w/index.php?title=Haskell&amp;action=edit&amp;section=9
/wiki/%D0%A1%D0%B8%D0%BD%D1%82%D0%B0%D0%BA%D1%81%D0%B8%D1%81
/wiki/%D0%A4%D0%B0%D0%BA%D1%82%D0%BE%D1%80%D0%B8%D0%B0%D0%BB
/wiki/%D0%A0%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D1%8F
/wiki/%D0%98%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0
/wiki/%D0%9C%D0%B0%D1%82%D0%B5%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0
/wiki/%D0%A6%D0%B5%D0%BB%D1%8B%D0%B9_%D1%82%D0%B8%D0%BF
/wiki/%D0%90%D1%80%D0%B3%D1%83%D0%BC%D0%B5%D0%BD%D1%82
/wiki/%D0%A1%D0%BE%D0%BF%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D1%81_%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D1%86%D0%BE%D0%BC
/w/index.php?title=Haskell&amp;action=edit&amp;section=10
/wiki/%D0%9A%D0%B0%D0%BB%D1%8C%D0%BA%D1%83%D0%BB%D1%8F%D1%82%D0%BE%D1%80
/wiki/%D0%9E%D0%B1%D1%80%D0%B0%D1%82%D0%BD%D0%B0%D1%8F_%D0%BF%D0%BE%D0%BB%D1%8C%D1%81%D0%BA%D0%B0%D1%8F_%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D1%8C
/wiki/%D0%A1%D0%B2%D1%91%D1%80%D1%82%D0%BA%D0%B0_%D1%81%D0%BF%D0%B8%D1%81%D0%BA%D0%B0
/w/index.php?title=Haskell&amp;action=edit&amp;section=11
/wiki/%D0%A7%D0%B8%D1%81%D0%BB%D0%B0_%D0%A4%D0%B8%D0%B1%D0%BE%D0%BD%D0%B0%D1%87%D1%87%D0%B8
/wiki/%D0%9A%D0%BE%D1%80%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D1%8F
/w/index.php?title=%D0%9E%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D0%B8%D1%82%D0%B5%D0%BB%D1%8C_%D1%81%D0%BF%D0%B8%D1%81%D0%BA%D0%B0&amp;action=edit&amp;redlink=1
http://en.wikipedia.org/wiki/List_Comprehension
/w/index.php?title=Haskell&amp;action=edit&amp;section=12
/wiki/%D0%9F%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%B5_%D1%87%D0%B8%D1%81%D0%BB%D0%B0
/wiki/%D0%A0%D0%B5%D1%88%D0%B5%D1%82%D0%BE_%D0%AD%D1%80%D0%B0%D1%82%D0%BE%D1%81%D1%84%D0%B5%D0%BD%D0%B0
/w/index.php?title=Haskell&amp;action=edit&amp;section=13
/wiki/%D0%90%D0%BB%D0%B3%D0%B5%D0%B1%D1%80%D0%B0%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D1%82%D0%B8%D0%BF_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85
/w/index.php?title=Haskell&amp;action=edit&amp;section=14
/w/index.php?title=Haskell&amp;action=edit&amp;section=15
/wiki/%D0%9F%D0%B0%D0%BB%D0%B8%D0%BD%D0%B4%D1%80%D0%BE%D0%BC
/wiki/%D0%AE%D0%BD%D0%B8%D0%BA%D0%BE%D0%B4
/w/index.php?title=Haskell&amp;action=edit&amp;section=16
/wiki/Xmonad
/wiki/Darcs
/w/index.php?title=Haskell&amp;action=edit&amp;section=17
#cite_note-9
#cite_note-10
http://en.wikipedia.org/wiki/SeL4#Current_research_and_development
http://gamr7.com/
#cite_note-11
/w/index.php?title=Haskell&amp;action=edit&amp;section=18
/wiki/%D0%9E%D1%82%D0%BA%D1%80%D1%8B%D1%82%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B5_%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5
/w/index.php?title=Haskell&amp;action=edit&amp;section=19
http://hackage.haskell.org/packages/archive/pkg-list.html#cat:database
http://hackage.haskell.org/package/haskelldb
http://hackage.haskell.org/package/HDBC
http://hackage.haskell.org/package/Takusen
/w/index.php?title=%D0%A1%D0%B2%D1%91%D1%80%D1%82%D0%BA%D0%B0_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)&amp;action=edit&amp;redlink=1
/w/index.php?title=Haskell&amp;action=edit&amp;section=20
http://hackage.haskell.org/packages/archive/pkg-list.html#cat:graphics
http://www.cs.york.ac.uk/fp/darcs/Blobs/
http://code.haskell.org/diagrams/
http://hackage.haskell.org/package/FieldTrip-0.2.7
http://haskell.org/haskellwiki/Glome
http://hackage.haskell.org/package/GLUT
http://hackage.haskell.org/package/OpenGL
/wiki/OpenGL
http://haskell.org/haskellwiki/GPipe
http://haskell.org/haskellwiki/Grapefruit
/wiki/%D0%A0%D0%B5%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5
http://haskell.org/haven/
http://dockerz.net/twd/HaskellCharts
http://hackage.haskell.org/package/SDL
http://www.haskell.org/yampa/
/wiki/%D0%A0%D0%B5%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5
/w/index.php?title=Haskell&amp;action=edit&amp;section=21
http://hackage.haskell.org/packages/archive/pkg-list.html#cat:gui
http://www.haskell.org/gtk2hs/
http://haskell.org/haskellwiki/Grapefruit
http://hackage.haskell.org/package/wxFruit
/wiki/%D0%A0%D0%B5%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5
http://qthaskell.berlios.de/
http://haskell.org/haskellwiki/WxHaskell
/w/index.php?title=Haskell&amp;action=edit&amp;section=22
http://hackage.haskell.org/packages/archive/pkg-list.html#cat:game
http://hackage.haskell.org/package/bloxorz
http://hackage.haskell.org/package/frag
/wiki/3D-%D1%88%D1%83%D1%82%D0%B5%D1%80
http://hackage.haskell.org/package/Monadius
/wiki/%D0%90%D1%80%D0%BA%D0%B0%D0%B4%D0%B0_(%D0%B8%D0%B3%D1%80%D0%B0)
http://raincat.bysusanlin.com/
/w/index.php?title=Haskell&amp;action=edit&amp;section=23
http://hackage.haskell.org/packages/archive/pkg-list.html#cat:network
http://gitit.net/
http://happstack.com/
/wiki/Twidge
/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81_%D0%BA%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%BD%D0%BE%D0%B9_%D1%81%D1%82%D1%80%D0%BE%D0%BA%D0%B8
/wiki/%D0%9C%D0%B8%D0%BA%D1%80%D0%BE%D0%B1%D0%BB%D0%BE%D0%B3%D0%B3%D0%B8%D0%BD%D0%B3
/w/index.php?title=Haskell&amp;action=edit&amp;section=24
http://hackage.haskell.org/packages/archive/pkg-list.html#cat:text
http://hackage.haskell.org/package/HaXml
http://www.haskell.org/haskellwiki/HXT
/wiki/%D0%9F%D1%80%D0%B5%D0%B4%D0%BC%D0%B5%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F
http://en.wikipedia.org/wiki/Arrow_(functional_programming)
http://en.wikipedia.org/wiki/Leksah
http://leksah.org/screenshots.html
/wiki/Pandoc
http://www.haskell.org/haskellwiki/Parsec
http://www.grammaticalframework.org/
/wiki/%D0%9E%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0_%D0%B5%D1%81%D1%82%D0%B5%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE_%D1%8F%D0%B7%D1%8B%D0%BA%D0%B0
/w/index.php?title=Yi&amp;action=edit&amp;redlink=1
/wiki/Emacs
/w/index.php?title=Haskell&amp;action=edit&amp;section=25
http://www.cs.kent.ac.uk/projects/ofa/chp/
http://www.haskell.org/haskellwiki/GHC/Data_Parallel_Haskell
http://hackage.haskell.org/package/parallel
http://hackage.haskell.org/package/stm
http://en.wikipedia.org/wiki/Software_Transactional_Memory
/w/index.php?title=Haskell&amp;action=edit&amp;section=26
http://hackage.haskell.org/packages/archive/pkg-list.html#cat:development
http://haskell.org/alex
/wiki/%D0%9B%D0%B5%D0%BA%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7
http://haskell.org/happy
/wiki/%D0%A1%D0%B8%D0%BD%D1%82%D0%B0%D0%BA%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7
http://haskell.org/haddock
http://hackage.haskell.org/package/HUnit
/wiki/%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5
http://hackage.haskell.org/package/QuickCheck
/w/index.php?title=Haskell&amp;action=edit&amp;section=27
http://hackage.haskell.org/packages/archive/pkg-list.html#cat:system
/wiki/Darcs
/w/index.php?title=House_(%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0)&amp;action=edit&amp;redlink=1
/wiki/Xmonad
/w/index.php?title=Haskell&amp;action=edit&amp;section=28
http://hackage.haskell.org/packages/archive/pkg-list.html#cat:language
http://en.wikipedia.org/wiki/Agda_(theorem_prover)
/wiki/%D0%A2%D0%B8%D0%BF_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85
/wiki/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_%D0%B4%D0%BE%D0%BA%D0%B0%D0%B7%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D1%81%D1%82%D0%B2%D0%BE_%D1%82%D0%B5%D0%BE%D1%80%D0%B5%D0%BC
http://hackage.haskell.org/package/curry-frontend
/wiki/Curry
http://en.wikipedia.org/wiki/Epigram_(programming_language)
http://www.flapjax-lang.org/
/wiki/%D0%A0%D0%B5%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5
http://hackage.haskell.org/package/language-python
http://hackage.haskell.org/package/language-c
http://hackage.haskell.org/package/chalmers-lava2000
http://hackage.haskell.org/package/llvm
/wiki/LLVM
http://www.pugscode.org/
/wiki/Perl_6
http://hackage.haskell.org/package/WebBits
/w/index.php?title=Haskell&amp;action=edit&amp;section=29
/wiki/%D0%A1%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5_%D1%8F%D0%B7%D1%8B%D0%BA%D0%BE%D0%B2_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F
/w/index.php?title=Haskell&amp;action=edit&amp;section=30
#cite_ref-0
#cite_ref-1
#cite_ref-2
http://haskell.org/
#cite_ref-3
http://www.haskell.org/onlinereport/
#cite_ref-4
http://hackage.haskell.org/trac/haskell-prime/
#cite_ref-5
http://www.haskell.org/pipermail/haskell/2009-November/021750.html
#cite_ref-6
http://www.haskell.org/haskellwiki/Implementations
#cite_ref-7
http://www.haskell.org/pipermail/cvs-ghc/2010-February/052606.html
#cite_ref-8
http://donsbot.wordpress.com/2010/02/21/smoking-fast-haskell-code-using-ghcs-new-llvm-codegen/
#cite_ref-9
http://www.haskell.org/haskellwiki/Haskell_in_industry
#cite_ref-10
http://homepages.inf.ed.ac.uk/wadler/realworld/bluespec.html
#cite_ref-11
http://fprog.ru/2009/issue2/
/w/index.php?title=Haskell&amp;action=edit&amp;section=31
/wiki/%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:BookSources/0596514980
/wiki/%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:BookSources/9780596514983
/wiki/%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:BookSources/5940743358
/wiki/%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:BookSources/9780521871723
/wiki/%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:BookSources/9780521692694
/wiki/%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:BookSources/0954300696
/w/index.php?title=Haskell&amp;action=edit&amp;section=32
/wiki/%D0%A4%D0%B0%D0%B9%D0%BB:Wikibooks-logo.svg
/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D1%83%D1%87%D0%B5%D0%B1%D0%BD%D0%B8%D0%BA
http://ru.wikibooks.org/wiki/%D0%AF%D0%B7%D1%8B%D0%BA_Haskell:_%D0%9E_%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%B5_%D0%B8_%D0%B2%D1%80%D0%B5%D0%B4%D0%B5_%D0%BB%D0%B5%D0%BD%D0%B8
http://www.haskell.org/
/wiki/Standard_ML
/wiki/Clean
http://www.haskell.ru/
/wiki/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA
http://www.roman-dushkin.narod.ru/fp.html
/wiki/%D0%9C%D0%98%D0%A4%D0%98
http://kchri.narod.ru
http://www.rsdn.ru/article/haskell/haskell_part1.xml
http://www.rsdn.ru/article/haskell/haskell_part2.xml
http://www.rsdn.ru/article/haskell/typesH.xml
http://community.livejournal.com/ru_lambda
http://community.livejournal.com/ru_declarative
http://spbhug.folding-maps.org
http://eclipsefp.sourceforge.net/
/wiki/%D0%A1%D1%80%D0%B5%D0%B4%D0%B0_%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE_%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D1%8F
/wiki/Eclipse_(%D1%81%D1%80%D0%B5%D0%B4%D0%B0_%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8)
http://www.developers.org.ua/archives/adept/2007/04/24/fp-lazy-evaluation/
http://www.willamette.edu/~fruehr/haskell/evolution.html
/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BF%D1%80%D0%B5%D1%82%D0%B0%D1%82%D0%BE%D1%80
/w/index.php?title=Chalmer%27s_Haskell_Interpreter&amp;action=edit&amp;redlink=1
/wiki/HUGS
/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%82%D0%BE%D1%80
/wiki/Glasgow_Haskell_Compiler
/w/index.php?title=Chalmer%27s_Haskell_compiler&amp;action=edit&amp;redlink=1
/w/index.php?title=Helium&amp;action=edit&amp;redlink=1
/w/index.php?title=John%27s_Haskell_Compiler&amp;action=edit&amp;redlink=1
/wiki/Another_Haskell_Compiler
/w/index.php?title=York_Haskell_Compiler&amp;action=edit&amp;redlink=1
/wiki/%D0%A8%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD:%D0%AF%D0%B7%D1%8B%D0%BA%D0%B8_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F
/wiki/%D0%9E%D0%B1%D1%81%D1%83%D0%B6%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5_%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D0%B0:%D0%AF%D0%B7%D1%8B%D0%BA%D0%B8_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F
http://ru.wikipedia.org/w/index.php?title=%D0%A8%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD:%D0%AF%D0%B7%D1%8B%D0%BA%D0%B8_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F&amp;action=edit
/wiki/%D0%AF%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F
/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D1%8F%D0%B7%D1%8B%D0%BA%D0%BE%D0%B2_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F
/wiki/%D0%A1%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5_%D1%8F%D0%B7%D1%8B%D0%BA%D0%BE%D0%B2_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F
/wiki/%D0%A1%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5_IDE
/wiki/%D0%98%D1%81%D1%82%D0%BE%D1%80%D0%B8%D1%8F_%D1%8F%D0%B7%D1%8B%D0%BA%D0%BE%D0%B2_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F
/wiki/%D0%A5%D1%80%D0%BE%D0%BD%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D1%8F_%D1%8F%D0%B7%D1%8B%D0%BA%D0%BE%D0%B2_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F
/wiki/%D0%90%D0%B4%D0%B0_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/%D0%90%D0%9F%D0%9B_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/%D0%AF%D0%B7%D1%8B%D0%BA_%D0%B0%D1%81%D1%81%D0%B5%D0%BC%D0%B1%D0%BB%D0%B5%D1%80%D0%B0
/wiki/ActionScript
/wiki/ABAP/4
/wiki/AutoIt
/wiki/AWK
/wiki/BASIC
/wiki/%D0%A1%D0%B8_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/%D0%9A%D0%BE%D0%B1%D0%BE%D0%BB
/wiki/C%2B%2B
/wiki/C_Sharp
/wiki/C%CF%89
/wiki/ColdFusion
/wiki/Common_Lisp
/wiki/D_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/w/index.php?title=DBase_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)&amp;action=edit&amp;redlink=1
/wiki/Delphi_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/Eiffel
/wiki/Erlang
/wiki/F_Sharp
/wiki/Forth
/wiki/%D0%A4%D0%BE%D1%80%D1%82%D1%80%D0%B0%D0%BD
/wiki/Gambas
/wiki/Groovy
/wiki/Icon_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/Java
/wiki/JavaScript
/wiki/Limbo
/wiki/Lua
/wiki/MATLAB
/wiki/Object_Pascal
/wiki/Objective-C
/wiki/OCaml
/wiki/Oz_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/%D0%9E%D0%B1%D0%B5%D1%80%D0%BE%D0%BD_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/Parser
/wiki/%D0%9F%D0%B0%D1%81%D0%BA%D0%B0%D0%BB%D1%8C_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/Perl
/wiki/PHP
/wiki/PowerBASIC
/wiki/PureBasic
/wiki/Python
/wiki/%D0%9F%D0%9B/1
/wiki/%D0%9F%D1%80%D0%BE%D0%BB%D0%BE%D0%B3_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/Ruby
/wiki/Scala_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/Scheme
/wiki/Smalltalk
/wiki/SQL
/wiki/PL/SQL
/wiki/Tcl
/wiki/Vala
/wiki/Visual_Basic
/wiki/Visual_Basic_.NET
/wiki/Clean
/wiki/Curry
/wiki/%D0%9B%D0%BE%D0%B3%D0%BE_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/ML
/wiki/%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D0%B0-3
/wiki/%D0%A0%D0%B5%D1%84%D0%B0%D0%BB
/wiki/%D0%A1%D0%B8%D0%BC%D1%83%D0%BB%D0%B0
/wiki/IEC61131-3
/wiki/Instruction_List
/wiki/Structured_Text
/wiki/FBD
/wiki/Ladder_Diagram
/wiki/Sequential_Function_Chart
/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D0%BB
/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D0%BB_68
/wiki/%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D0%B0-2
/wiki/%D0%9C%D0%B8%D1%80%D0%B0%D0%BD%D0%B4%D0%B0_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
/wiki/Hope
/wiki/%D0%AD%D0%B7%D0%BE%D1%82%D0%B5%D1%80%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5_%D1%8F%D0%B7%D1%8B%D0%BA%D0%B8_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F
/wiki/HQ9%2B
/wiki/INTERCAL
/wiki/Brainfuck
/wiki/Befunge
/wiki/Malbolge
/wiki/Piet
/wiki/Spoon
/wiki/Unlambda
/wiki/Whitespace
/wiki/FALSE
/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%9A%D0%B0%D0%BA_%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D1%82%D1%8C_%D1%81%D1%82%D0%B0%D1%82%D1%8C%D0%B8
/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:Rq
/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%A1%D0%BD%D0%BE%D1%81%D0%BA%D0%B8
http://ru.wikipedia.org/wiki/Haskell
/wiki/%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:Categories
/wiki/%D0%9A%D0%B0%D1%82%D0%B5%D0%B3%D0%BE%D1%80%D0%B8%D1%8F:%D0%9F%D0%BE%D1%8F%D0%B2%D0%B8%D0%BB%D0%B8%D1%81%D1%8C_%D0%B2_1990_%D0%B3%D0%BE%D0%B4%D1%83
/wiki/%D0%9A%D0%B0%D1%82%D0%B5%D0%B3%D0%BE%D1%80%D0%B8%D1%8F:%D0%AF%D0%B7%D1%8B%D0%BA%D0%B8_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F_%D0%BF%D0%BE_%D0%B0%D0%BB%D1%84%D0%B0%D0%B2%D0%B8%D1%82%D1%83
/wiki/%D0%9A%D0%B0%D1%82%D0%B5%D0%B3%D0%BE%D1%80%D0%B8%D1%8F:Haskell
/wiki/%D0%9A%D0%B0%D1%82%D0%B5%D0%B3%D0%BE%D1%80%D0%B8%D1%8F:%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5_%D1%8F%D0%B7%D1%8B%D0%BA%D0%B8_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F
/wiki/%D0%9A%D0%B0%D1%82%D0%B5%D0%B3%D0%BE%D1%80%D0%B8%D1%8F:%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%A1%D1%82%D0%B0%D1%82%D1%8C%D0%B8_%D0%B1%D0%B5%D0%B7_%D1%81%D0%BD%D0%BE%D1%81%D0%BE%D0%BA
/wiki/Haskell
/wiki/%D0%9E%D0%B1%D1%81%D1%83%D0%B6%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5:Haskell
/w/index.php?title=Haskell&amp;action=edit
/w/index.php?title=Haskell&amp;action=history
http://ru.wikipedia.org/w/index.php?title=%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:UsabilityInitiativeOptIn&amp;from=Haskell
/w/index.php?title=%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:UserLogin&amp;returnto=Haskell
/wiki/%D0%97%D0%B0%D0%B3%D0%BB%D0%B0%D0%B2%D0%BD%D0%B0%D1%8F_%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B8%D1%86%D0%B0
/wiki/%D0%97%D0%B0%D0%B3%D0%BB%D0%B0%D0%B2%D0%BD%D0%B0%D1%8F_%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B8%D1%86%D0%B0
/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%9F%D0%BE%D0%B8%D1%81%D0%BA_%D0%BF%D0%BE_%D0%BA%D0%B0%D1%82%D0%B5%D0%B3%D0%BE%D1%80%D0%B8%D1%8F%D0%BC
/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%90%D0%BB%D1%84%D0%B0%D0%B2%D0%B8%D1%82%D0%BD%D1%8B%D0%B9_%D1%83%D0%BA%D0%B0%D0%B7%D0%B0%D1%82%D0%B5%D0%BB%D1%8C
/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%98%D0%B7%D0%B1%D1%80%D0%B0%D0%BD%D0%BD%D1%8B%D0%B5_%D1%81%D1%82%D0%B0%D1%82%D1%8C%D0%B8
/wiki/%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:Random
/wiki/%D0%9F%D0%BE%D1%80%D1%82%D0%B0%D0%BB:%D0%A2%D0%B5%D0%BA%D1%83%D1%89%D0%B8%D0%B5_%D1%81%D0%BE%D0%B1%D1%8B%D1%82%D0%B8%D1%8F
/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D1%8F_%D0%BE%D0%B1_%D0%BE%D1%88%D0%B8%D0%B1%D0%BA%D0%B0%D1%85
/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%9F%D0%BE%D1%80%D1%82%D0%B0%D0%BB_%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%B0
/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%A4%D0%BE%D1%80%D1%83%D0%BC
/wiki/%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:RecentChanges
/wiki/%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:NewPages
/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%A1%D0%BF%D1%80%D0%B0%D0%B2%D0%BA%D0%B0
http://wikimediafoundation.org/wiki/Global_Support/ru
/w/index.php?title=%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:Book&amp;bookcmd=book_creator&amp;referer=Haskell
/w/index.php?title=%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:Book&amp;bookcmd=render_article&amp;arttitle=Haskell&amp;oldid=24013151&amp;writer=rl
/w/index.php?title=Haskell&amp;printable=yes
/wiki/%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:WhatLinksHere/Haskell
/wiki/%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:RecentChangesLinked/Haskell
/wiki/%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:SpecialPages
/w/index.php?title=Haskell&amp;oldid=24013151
/w/index.php?title=%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:Cite&amp;page=Haskell&amp;id=24013151
http://bg.wikipedia.org/wiki/Haskell
http://ca.wikipedia.org/wiki/Haskell
http://cs.wikipedia.org/wiki/Haskell
http://de.wikipedia.org/wiki/Haskell_(Programmiersprache)
http://el.wikipedia.org/wiki/Haskell
http://en.wikipedia.org/wiki/Haskell_(programming_language)
http://eo.wikipedia.org/wiki/Haskell
http://es.wikipedia.org/wiki/Haskell
http://et.wikipedia.org/wiki/Haskell
http://fa.wikipedia.org/wiki/%D9%87%D8%B3%DA%A9%D9%84_(%D8%B2%D8%A8%D8%A7%D9%86_%D8%A8%D8%B1%D9%86%D8%A7%D9%85%D9%87%E2%80%8C%D9%86%D9%88%DB%8C%D8%B3%DB%8C)
http://fi.wikipedia.org/wiki/Haskell
http://fr.wikipedia.org/wiki/Haskell
http://gl.wikipedia.org/wiki/Haskell
http://he.wikipedia.org/wiki/Haskell
http://hr.wikipedia.org/wiki/Haskell_(programski_jezik)
http://hu.wikipedia.org/wiki/Haskell
http://it.wikipedia.org/wiki/Haskell
http://ja.wikipedia.org/wiki/Haskell
http://ko.wikipedia.org/wiki/%ED%95%98%EC%8A%A4%EC%BC%88
http://la.wikipedia.org/wiki/Haskell
http://lv.wikipedia.org/wiki/Haskell
http://ms.wikipedia.org/wiki/Haskell
http://nl.wikipedia.org/wiki/Haskell
http://pl.wikipedia.org/wiki/Haskell
http://pt.wikipedia.org/wiki/Haskell_(linguagem_de_programa%C3%A7%C3%A3o)
http://ro.wikipedia.org/wiki/Haskell
http://sk.wikipedia.org/wiki/Haskell_(programovac%C3%AD_jazyk)
http://sl.wikipedia.org/wiki/Haskell
http://sv.wikipedia.org/wiki/Haskell
http://tr.wikipedia.org/wiki/Haskell
http://uk.wikipedia.org/wiki/Haskell
http://zh.wikipedia.org/wiki/Haskell
http://www.mediawiki.org/
http://wikimediafoundation.org/
http://creativecommons.org/licenses/by-sa/3.0/
http://wikimediafoundation.org/wiki/Terms_of_Use/ru
http://wikimediafoundation.org/wiki/%D0%9F%D0%BE%D0%BB%D0%B8%D1%82%D0%B8%D0%BA%D0%B0_%D0%BA%D0%BE%D0%BD%D1%84%D0%B8%D0%B4%D0%B5%D0%BD%D1%86%D0%B8%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D0%B8
/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%9E%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5
/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%9E%D1%82%D0%BA%D0%B0%D0%B7_%D0%BE%D1%82_%D0%BE%D1%82%D0%B2%D0%B5%D1%82%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8
